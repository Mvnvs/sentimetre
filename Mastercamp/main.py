from flask import Flask, render_template, request
import matplotlib.pyplot as plt
import io
import base64
import csv
import tensorflow as tf
import pandas as pd
from tensorflow.keras.preprocessing.sequence import pad_sequences
from neurone import max_length,padding_type, trunc_type
import pickle
from wordcloud import WordCloud
from wordcloud import STOPWORDS
from nltk.tokenize import word_tokenize
from nltk import pos_tag
from collections import Counter
from datetime import datetime, timedelta
import os
import subprocess

model = tf.keras.models.load_model('neurone')
# Charger le tokenizer à partir du fichier pickle
with open('tokenizer.pkl', 'rb') as file:
    tokenizer = pickle.load(file)

app = Flask(__name__, template_folder='templates', static_folder='static')

@app.route('/')
def index():
    with open('site.html', 'r') as file:
        content = file.read()
    return content

def write_to_csv(reviews, dates, filename):
    with open(filename, 'w', newline='', encoding='utf-8-sig') as f:
        writer = csv.writer(f)
        writer.writerow(['Date', 'Review'])
        for review, date in zip(reviews, dates):
            review_clean = review.replace('Show less', '')
            writer.writerow([date, review_clean])


def plot_sentiment_6month(df):
    from datetime import datetime, timedelta
    import pandas as pd
    import matplotlib.pyplot as plt
    # Convertir la colonne 'Date' en type de données de date et d'heure
    df['Date'] = pd.to_datetime(df['Date'])
    
    # Obtenez la date d'aujourd'hui
    today = datetime.now().date()
    
    # Obtenez la date il y a 6 mois à partir d'aujourd'hui
    six_months_ago = today - timedelta(days=6*30)
    
    # Générer une liste des dates des 6 derniers mois au format YYYY-MM
    dates_six_months_ago = pd.date_range(start=six_months_ago, end=today, freq='M').strftime('%Y-%m').tolist()
    
    # Filtrer la DataFrame pour les mois des 6 derniers mois
    df_filtered = df[df['Date'].dt.strftime('%Y-%m').isin(dates_six_months_ago)]
    
    # Compter le nombre d'avis positifs et négatifs par mois
    reviews_per_month = df_filtered.groupby(['Date', 'Liked']).size().unstack().fillna(0)
    
    # Créer une nouvelle figure et des axes distincts
    fig, ax = plt.subplots(figsize=(8, 8))
    
    # Tracer les données
    reviews_per_month.plot(kind='bar', stacked=True, ax=ax)
    ax.set_xlabel('Month')
    ax.set_ylabel('Number of Reviews')
    ax.set_title('Number of Positive and Negative Reviews for the Past 6 Months')
    
    # Vérifier le nombre de colonnes dans reviews_per_month
    num_columns = len(reviews_per_month.columns)
    
    # Vérifier s'il y a une seule colonne
    if num_columns == 1:
        column_name = reviews_per_month.columns[0]
        
        # Vérifier le nom de la colonne
        if column_name == 0:
            # Plot avec la légende "Negative Reviews" uniquement
            ax.legend(['Negative Reviews'], loc='upper left')
        elif column_name == 1:
            # Plot avec la légende "Positive Reviews" uniquement
            ax.legend(['Positive Reviews'], loc='upper left')
    
    # Vérifier s'il y a deux colonnes
    elif num_columns == 2:
        # Plot avec les deux légendes
        ax.legend(['Negative Reviews', 'Positive Reviews'], loc='upper left')
    
    # Formater les étiquettes sur l'axe x pour afficher uniquement les mois
    ax.set_xticklabels(reviews_per_month.index.strftime('%Y-%m'))

    # Enregistrer le graphique dans un objet BytesIO
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    
    # Convertir l'image en base64
    image_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')
    
    # Retourner les données de l'image sous forme de balise HTML
    return image_base64

def month_total(df):
    from datetime import datetime, timedelta
    import pandas as pd
    import matplotlib.pyplot as plt
    
    today = datetime.now().date()
    six_months_ago = today - timedelta(days=6*30)
    dates_six_months_ago = pd.date_range(start=six_months_ago, end=today, freq='M').strftime('%Y-%m').tolist()
    df_filtered = df[df['Date'].dt.strftime('%Y-%m').isin(dates_six_months_ago)]
    
    # Compter le nombre d'avis positifs et négatifs
    count_positives = (df_filtered['Liked'] == 1).sum()
    count_negatives = (df_filtered['Liked'] == 0).sum()

    # Créer une nouvelle figure et des axes distincts
    fig, ax = plt.subplots()

    # Tracer les données
    ax.bar(['Positive', 'Negative'], [count_positives, count_negatives])
    ax.set_xlabel('Sentiment')
    ax.set_ylabel('Number of Reviews')
    ax.set_title('Number of Positive and Negative Reviews for the Past 6 Months')

    
    # Enregistrer le graphique dans un objet BytesIO
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    
    # Convertir l'image en base64
    image_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')
    
    # Retourner les données de l'image sous forme de balise HTML
    return image_base64

import openai


openai.api_key = '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'

def chat_with_gpt(prompt):
    # Appeler l'API de complétion de ChatGPT
    response = openai.Completion.create(
        engine='text-davinci-003',
        prompt=prompt,
        max_tokens=500,
        temperature=0.7,
        n=1,
        stop=None
    )

    # Extraire la réponse générée de la réponse de l'API
    answer = response.choices[0].text.strip()

    return answer

def recap_month(df):
    def word(text):
        from nltk.corpus import stopwords

        # Tokenization des mots
        mots = word_tokenize(paragraph)

        # Suppression des stopwords
        stopwords = set(stopwords.words('english'))
        mots_filtered = [mot for mot in mots if mot.lower() not in stopwords]

        # Extraction des parties du discours
        mots_pos = pos_tag(mots_filtered)

        # Filtrage des noms
        mots_filtres = [mot.lower() for mot, pos in mots_pos if pos.startswith('N')]

        # Enlèvement des ponctuations
        mots_filtres = [mot for mot in mots_filtres if mot.isalpha()]

        # Comptage des mots
        word_counts = Counter(mots_filtres)
        most_common = word_counts.most_common(3)
        
        return most_common
    
    
    if 'Date' in df.columns:
        nb_commentaires_total = len(df['Liked'])
        # Nombre de commentaires positifs et négatifs
        nb_commentaires_positifs = (df['Liked'] == 1).mean() * 100
        nb_commentaires_negatifs = (df['Liked'] == 0).mean() * 100
        paragraph=' '.join(df[df.Liked==0].Review.tolist())
        mot_négatif = word(paragraph)
        
        paragraph=' '.join(df[df.Liked==1].Review.tolist())
        mot_positif = word(paragraph)
        
        recap_input = f"Les 6 derniers mois : Nombre de commentaires total {nb_commentaires_total},Nombre de commentaires positifs : {nb_commentaires_positifs}%, Nombre de commentaires négatifs : {nb_commentaires_negatifs}%, Les mots les plus utilisés dans les commentaires positifs : {mot_positif}, Les mots les plus utilisés dans les commentaires négatifs : {mot_négatif}. fais un seul paragraphe efficace au restaurateur sur une vision globale des commenaires des clients, identifier les tendances et les problèmes récurrents, et prendre des décisions éclairées pour améliorer la qualité de son service et de son établissement.Pour les mots les plus utilisés dans le positif ou négatif essaie d'en deduire avec ces mots quelque chose"
        # Appeler la fonction chat_with_gpt pour obtenir une réponse de ChatGPT
        response = chat_with_gpt(recap_input)
    
        return response
    
def recap(df):
    def word(text):
        from nltk.corpus import stopwords

        # Tokenization des mots
        mots = word_tokenize(paragraph)

        # Suppression des stopwords
        stopwords = set(stopwords.words('english'))
        mots_filtered = [mot for mot in mots if mot.lower() not in stopwords]

        # Extraction des parties du discours
        mots_pos = pos_tag(mots_filtered)

        # Filtrage des noms
        mots_filtres = [mot.lower() for mot, pos in mots_pos if pos.startswith('N')]

        # Enlèvement des ponctuations
        mots_filtres = [mot for mot in mots_filtres if mot.isalpha()]

        # Comptage des mots
        word_counts = Counter(mots_filtres)
        most_common = word_counts.most_common(3)
        
        return most_common
    
    
    nb_commentaires_total = len(df['Liked'])
    # Nombre de commentaires positifs et négatifs
    nb_commentaires_positifs = (df['Liked'] == 1).mean() * 100
    nb_commentaires_negatifs = (df['Liked'] == 0).mean() * 100
    paragraph=' '.join(df[df.Liked==0].Review.tolist())
    mot_négatif = word(paragraph)
    
    paragraph=' '.join(df[df.Liked==1].Review.tolist())
    mot_positif = word(paragraph)
    
    recap_input = f"Nombre de commentaires total {nb_commentaires_total},Nombre de commentaires positifs : {nb_commentaires_positifs}%, Nombre de commentaires négatifs : {nb_commentaires_negatifs}%, Les mots les plus utilisés dans les commentaires positifs : {mot_positif}, Les mots les plus utilisés dans les commentaires négatifs : {mot_négatif}. fais un seul paragraphe efficace adressé au restaurateur sur une vision globale des commenaires des clients, identifier les tendances et les problèmes récurrents, et prendre des décisions éclairées pour améliorer la qualité de son service et de son établissement.Pour les mots les plus utilisés dans le positif ou négatif essaie d'en deduire avec ces mots quelque chose"
    # Appeler la fonction chat_with_gpt pour obtenir une réponse de ChatGPT
    response = chat_with_gpt(recap_input)

    return response
    
def plot_reviews_per_year_month(df):
    # Convertir la colonne 'Date' en format datetime
    df['Date'] = pd.to_datetime(df['Date'], format='%Y-%m')

    # Extraire l'année à partir de la colonne 'Date'
    df['Year'] = df['Date'].dt.year

    reviews_per_year = df.groupby(['Year', 'Liked']).size().unstack().fillna(0)
    
    # Tracer les données
    reviews_per_year.plot(kind='bar', stacked=True)
    
    # Définir les labels des axes et le titre du graphique
    plt.xlabel('Year')
    plt.ylabel('Number of Reviews')
    plt.title('Number of Positive and Negative Reviews per Year')

    # Vérifier le nombre de colonnes dans reviews_per_year
    num_columns = len(reviews_per_year.columns)
    
    # Vérifier s'il y a une seule colonne
    if num_columns == 1:
        column_name = reviews_per_year.columns[0]
        
        # Vérifier le nom de la colonne
        if column_name == 0:
            # Plot avec la légende "Negative Reviews" uniquement
            plt.legend(['Negative Reviews'], loc='upper left')
        elif column_name == 1:
            # Plot avec la légende "Positive Reviews" uniquement
            plt.legend(['Positive Reviews'], loc='upper left')
    
    # Vérifier s'il y a deux colonnes
    elif num_columns == 2:
        # Plot avec les deux légendes
        plt.legend(['Negative Reviews', 'Positive Reviews'], loc='upper left')
    
    # Enregistrer le graphique dans un objet BytesIO
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)

    # Convertir l'image en base64
    image_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')

    # Retourner les données de l'image sous forme de balise HTML
    return image_base64

@app.route('/tocsv', methods=['POST'])
def tocsv():
    import time
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from datetime import datetime
    from urllib.parse import urlparse

    link = request.form.get('link')
    # Spécifiez le chemin vers votre ChromeDriver
    options = Options()
    options.add_argument("--headless")
    driver = webdriver.Chrome(options=options)

    # Remplacer par l'URL de la page TripAdvisor dont vous voulez extraire les commentaires
    url = link
    parsed_url = urlparse(url)
    domain = parsed_url.netloc

    # Vérifier si le domaine est par défaut .com
    if not domain.endswith('.com'):
        default_domain = 'www.tripadvisor.com'
        url = url.replace(domain, default_domain)
        
    reviews = []
    dates = []

    while url:
        driver.get(url)
    
        time.sleep(5)  # Attendre que les avis soient entièrement chargés


        # Attendre que les avis soient chargés
        wait = WebDriverWait(driver, 20)
        review_containers = wait.until(EC.presence_of_all_elements_located((By.CLASS_NAME, "review-container")))
        
        
        # Extraire uniquement le texte des avis
        for container in review_containers:
            try:
                date_elem = container.find_element(By.XPATH, ".//div[contains(@class, 'prw_rup prw_reviews_stay_date_hsx')]")
                date_text = date_elem.text.strip()
                if date_text:
                    date_object = datetime.strptime(date_text.split(" ")[-2] + " " + date_text.split(" ")[-1], "%B %Y")
                    date = date_object.strftime("%Y-%m")  # Format de date: AAAA-MM
                    
                review_elems = container.find_element(By.XPATH, ".//div[contains(@class, 'prw_rup prw_reviews_text_summary_hsx')]")
                reviews.append(review_elems.text)
                dates.append(date)
            except Exception as e:
                print(f"Un problème est survenu lors de la recherche des commentaires : {e}")
        
        # Chercher le bouton "Suivant" et obtenir le lien de la page suivante
        try:
            next_button = driver.find_element(By.LINK_TEXT, "Next")
            url = next_button.get_attribute('href')
        except Exception as e:
            print(f"Fin des pages ou une erreur s'est produite : {e}")
            url = None

    write_to_csv(reviews, dates, 'comments_advisor.csv')


    # Fermer le navigateur
    driver.quit()

    current_file = os.path.realpath(__file__)
    current_directory = os.path.dirname(current_file)

    file = os.path.join(current_directory, "comments_advisor.csv")

    if os.name == 'nt':  # Windows
        os.startfile(file)  # Ouvrir le fichier CSV
        os.startfile(current_directory)  # Ouvrir le dossier contenant le fichier CSV
    elif os.name == 'posix':  # macOS/Linux
        subprocess.call(['xdg-open', file])  # Ouvrir le fichier CSV
        subprocess.call(['xdg-open', current_directory])  # Ouvrir le dossier contenant le fichier CSV
            
    return f"Extraction réussi des commentaires dans le fichier : {file}"
    
@app.route('/run-script', methods=['POST'])
def run_script():
    import time
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from datetime import datetime
    from urllib.parse import urlparse

    link = request.form.get('link')
    # Spécifiez le chemin vers votre ChromeDriver
    options = Options()
    options.add_argument("--headless")
    driver = webdriver.Chrome(options=options)

    # Remplacer par l'URL de la page TripAdvisor dont vous voulez extraire les commentaires
    url = link
    parsed_url = urlparse(url)
    domain = parsed_url.netloc

    # Vérifier si le domaine est par défaut .com
    if not domain.endswith('.com'):
        default_domain = 'www.tripadvisor.com'
        url = url.replace(domain, default_domain)
        
    reviews = []
    dates = []

    while url:
        driver.get(url)
    
        time.sleep(5)  # Attendre que les avis soient entièrement chargés


        # Attendre que les avis soient chargés
        wait = WebDriverWait(driver, 20)
        review_containers = wait.until(EC.presence_of_all_elements_located((By.CLASS_NAME, "review-container")))
        
        
        # Extraire uniquement le texte des avis
        for container in review_containers:
            try:
                date_elem = container.find_element(By.XPATH, ".//div[contains(@class, 'prw_rup prw_reviews_stay_date_hsx')]")
                date_text = date_elem.text.strip()
                if date_text:
                    date_object = datetime.strptime(date_text.split(" ")[-2] + " " + date_text.split(" ")[-1], "%B %Y")
                    date = date_object.strftime("%Y-%m")  # Format de date: AAAA-MM
                    
                review_elems = container.find_element(By.XPATH, ".//div[contains(@class, 'prw_rup prw_reviews_text_summary_hsx')]")
                reviews.append(review_elems.text)
                dates.append(date)
            except Exception as e:
                print(f"Un problème est survenu lors de la recherche des commentaires : {e}")
        
        # Chercher le bouton "Suivant" et obtenir le lien de la page suivante
        try:
            next_button = driver.find_element(By.LINK_TEXT, "Next")
            url = next_button.get_attribute('href')
        except Exception as e:
            print(f"Fin des pages ou une erreur s'est produite : {e}")
            url = None

    # Fermer le navigateur
    driver.quit()
    
    if len(reviews) == 0:
        return render_template('vide.html')
    else:
        sequences = tokenizer.texts_to_sequences(reviews)
        padded = pad_sequences(sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)
        prediction = model.predict(padded)
        predictions_list = ["Positif" if pred > 0.5 else "Négatif" for pred in prediction]
        note = [1 if pred == "Positif" else 0 for pred in predictions_list]
        plot1 = plot_histogram(predictions_list)
    
        
        data = {'Date': dates, 'Review': reviews, 'Liked': note}
        df = pd.DataFrame(data) 
    
    
        if (len(df[df.Liked == 0]) != 0):
            paragraph=' '.join(df[df.Liked==0].Review.tolist())
            néga = cloud(paragraph,"negatif")
            freq1 = plot_frequence(paragraph)
        else:
            néga = ""
            freq1 = ""
        if(len(df[df.Liked == 1]) != 0):
            paragraph=' '.join(df[df.Liked==1].Review.tolist())
            posi = cloud(paragraph,"positif")
            freq = plot_frequence(paragraph)
        else:
            posi = ""
            freq = ""
        
        image6=plot_reviews_per_year_month(df)
        recapi = recap(df)
        
        today = datetime.now().date()
        six_months_ago = today - timedelta(days=6*30)
        dates_six_months_ago = pd.date_range(start=six_months_ago, end=today, freq='M').strftime('%Y-%m').tolist()
        df['Date'] = pd.to_datetime(df['Date']).apply(lambda x: x.strftime('%Y-%m'))
        df = df[df['Date'].isin(dates_six_months_ago)]
        if df.empty:
            return render_template('csv-reviews.html', image1=plot1, image2=freq1 , image3=freq, image4=posi,image5=néga,text1=recapi)
        else:
            if (len(df[df.Liked == 0]) != 0):
                paragraph=' '.join(df[df.Liked==0].Review.tolist())
                néga2 = cloud(paragraph,"negatif")
                freq2 = plot_frequence(paragraph)
            else:
                néga2 = ""
                freq2 =""
            if(len(df[df.Liked == 1]) != 0):
                paragraph=' '.join(df[df.Liked==1].Review.tolist())
                posi2 = cloud(paragraph,"positif")
                freq3 = plot_frequence(paragraph)
            else:
                posi2 = ""
                freq3 = ""
            
            recapi2 = recap_month(df)
            
            return render_template('process-csv.html', image1=plot1, image2=freq1 , image3=freq, image4=posi,image5=néga, image6=image6,image7=plot_sentiment_6month(df),image8=month_total(df),image9=freq2,image10=freq3,image11=néga2,image12=posi2,text1=recapi,text2=recapi2)

def plot_histogram(predictions_list):
    nb_avis_positifs = predictions_list.count("Positif")
    nb_avis_negatifs = predictions_list.count("Négatif")
    categories = ['Positive', 'Negative']
    nombre_avis = [nb_avis_positifs, nb_avis_negatifs]

    # Plot histogramme
    plt.figure()
    plt.bar(categories, nombre_avis)
    plt.xlabel('Sentiment des avis')
    plt.ylabel('Nombre d\'avis')
    plt.title('Répartition des avis positifs et négatifs')
    plt.tight_layout()

    # Enregistrer le graphique dans un objet BytesIO
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)

    # Convertir l'image en base64
    image_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')

    # Retourner les données de l'image sous forme de chaîne base64
    return image_base64
    
import nltk
from nltk.corpus import opinion_lexicon
from nltk.corpus import stopwords


nltk.download('punkt')
positive_words = set(opinion_lexicon.positive())
negative_words = set(opinion_lexicon.negative())
stopwords = set(stopwords.words('english'))

def is_positive_word(word):
    return word.lower() in positive_words

def is_negative_word(word):
    return word.lower() in negative_words

def cloud(text, pola):
    stopword_list = set(STOPWORDS)
    words = text.split()
    
    # Filtrer les mots positifs, négatifs ou neutres en fonction de 'pola'
    if pola == 'positif':
        filtered_words = [word for word in words if is_positive_word(word)]
    else:
        filtered_words = [word for word in words if is_negative_word(word)]
        
    if len(filtered_words) == 0:
        words = word_tokenize(text)
        tagged_words = pos_tag(words)
        
        adjectives = []
        
        for word, pos in tagged_words:
            if pos.startswith('JJ') and word.lower() not in stopword_list:
                    adjectives.append("not " + word)
        filtered_words = adjectives
    
    # Créer le nuage de mots avec les mots filtrés
    word_cloud = WordCloud(width=550, height=550, background_color='white', stopwords=stopword_list, min_font_size=15).generate(' '.join(filtered_words))

    # Créer le plot de la word cloud
    plt.figure(figsize=(8, 6))
    plt.imshow(word_cloud)
    plt.axis("off")
    plt.tight_layout()

    # Enregistrer le plot en mémoire
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)

    # Convertir l'image en base64
    plot_img = base64.b64encode(buffer.read()).decode('utf-8')

    # Retourner l'image encodée en base64
    return plot_img

def plot_frequence(paragraph):
    from nltk.corpus import stopwords
    import matplotlib.pyplot as plt

    # Tokenization des mots
    mots = word_tokenize(paragraph)

    # Suppression des stopwords
    stopwords = set(stopwords.words('english'))
    mots_filtered = [mot for mot in mots if mot.lower() not in stopwords]

    # Extraction des parties du discours
    mots_pos = pos_tag(mots_filtered)

    # Filtrage des noms
    mots_filtres = [mot.lower() for mot, pos in mots_pos if pos.startswith('N')]

    # Enlèvement des ponctuations
    mots_filtres = [mot for mot in mots_filtres if mot.isalpha()]

    # Comptage des mots
    word_counts = Counter(mots_filtres)
    most_common = word_counts.most_common(5)
    x_labels = [word[0] for word in most_common]
    y_values = [word[1] for word in most_common]

    # Créer une nouvelle figure pour le plot de fréquence
    plt.figure(figsize=(9, 8))

    # Affichage du plot de fréquence
    plt.bar(x_labels, y_values)
    plt.xlabel('Mots')
    plt.ylabel('Fréquence')
    plt.title('Mots les plus utilisés (hors adjectifs et ponctuations)')
    plt.xticks(rotation=45)

    # Retourner l'image encodée en base64
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    plot_img = base64.b64encode(buffer.read()).decode('utf-8')

    return plot_img



@app.route('/process-csv', methods=['POST'])
def process_csv():
    csv_file = request.files['csv_file']
    csv_data = csv_file.read().decode('utf-8')
    
    csv_lines = csv_data.splitlines()
    csv_reader = csv.reader(csv_lines)
    
    rows = []
    dates = []
    next(csv_reader)
    
    for row in csv_reader:
        if len(row) == 1:
            rows.append(row[0])
        else:
            date = row[0]
            review = row[1]
            rows.append(review)
            dates.append(date)
    
    if len(rows)==0:
        return render_template('vide.html')
    else:
        sequences = tokenizer.texts_to_sequences(rows)
        padded = pad_sequences(sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)
        prediction = model.predict(padded)
        predictions_list = ["Positif" if pred > 0.5 else "Négatif" for pred in prediction]
        note = [1 if pred == "Positif" else 0 for pred in predictions_list]
        plot1 = plot_histogram(predictions_list)
        
        if len(dates) == 0:
            data = {'Review': rows, 'Liked': note}
            df = pd.DataFrame(data)
    
            if (len(df[df.Liked == 0]) != 0):
                paragraph=' '.join(df[df.Liked==0].Review.tolist())
                néga = cloud(paragraph,"negatif")
                freq1 = plot_frequence(paragraph)
            else:
                néga = ""
                freq1 = ""
            if(len(df[df.Liked == 1]) != 0):
                paragraph=' '.join(df[df.Liked==1].Review.tolist())
                posi = cloud(paragraph,"positif")
                freq = plot_frequence(paragraph)
            else:
                posi = ""
                freq = "iVBORw0KGgoAAAANSUhEUgAAAfQAAAH0CAYAAADL1t+KAAAACXBIWXMAAAsTAAALEwEAmpwYAAAGWGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDggNzkuMTY0MDM2LCAyMDE5LzA4LzEzLTAxOjA2OjU3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIiB4bWxuczpwaG90b3Nob3A9Imh0dHA6Ly9ucy5hZG9iZS5jb20vcGhvdG9zaG9wLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHhtcDpDcmVhdGVEYXRlPSIyMDIzLTA3LTA0VDExOjMyOjM0KzAyOjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDIzLTA3LTA0VDExOjMyOjM0KzAyOjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMy0wNy0wNFQxMTozMjozNCswMjowMCIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpiMzZkOWQ5Mi1mNjc4LTVlNDMtYjNhOS0wYTYxODBjNGY0ZDgiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDpiODkyZTc3OS04MDJhLTAzNDAtOTQzYi1hMDIxMWE2OTQ5ZDUiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDplYWE2MWM0Zi0zZGNjLTM2NDctOWE2OS05NDhlN2JhMTY2ZWMiIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiIGRjOmZvcm1hdD0iaW1hZ2UvcG5nIj4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY3JlYXRlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDplYWE2MWM0Zi0zZGNjLTM2NDctOWE2OS05NDhlN2JhMTY2ZWMiIHN0RXZ0OndoZW49IjIwMjMtMDctMDRUMTE6MzI6MzQrMDI6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YjM2ZDlkOTItZjY3OC01ZTQzLWIzYTktMGE2MTgwYzRmNGQ4IiBzdEV2dDp3aGVuPSIyMDIzLTA3LTA0VDExOjMyOjM0KzAyOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPC9yZGY6U2VxPiA8L3htcE1NOkhpc3Rvcnk+IDxwaG90b3Nob3A6RG9jdW1lbnRBbmNlc3RvcnM+IDxyZGY6QmFnPiA8cmRmOmxpPnhtcC5kaWQ6MmNhOGJiNmUtOGRlYi0zZTQzLWE2YmUtNzE3YTZiNGEzY2E2PC9yZGY6bGk+IDwvcmRmOkJhZz4gPC9waG90b3Nob3A6RG9jdW1lbnRBbmNlc3RvcnM+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+ysHnXAAAFD5JREFUeNrt3Tt2G0cWgGEGAnoZtl7UOT4OvRQHXukkdkyCACim3oJIilvAACPAQ1l84FHV9bhf8MUzppr1s7urb52tVqszAKBtfggAIOgAgKADAIIOAAg6AAg6ACDoAICgAwCCDgCCDgAI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"
            
            recapi = recap(df)
            
            return render_template('csv-reviews.html', image1=plot1, image2=freq1 , image3=freq, image4=posi,image5=néga,image6="iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+P+/HgAF/wGHvH+fjAAAAABJRU5ErkJggg==",text1=recapi)
            
        else:
            data = {'Date': dates, 'Review': rows, 'Liked': note}
            df = pd.DataFrame(data) 
            
            if (len(df[df.Liked == 0]) != 0):
                paragraph=' '.join(df[df.Liked==0].Review.tolist())
                néga = cloud(paragraph,"negatif")
                freq1 = plot_frequence(paragraph)
            else:
                néga = ""
                freq1 =""
            if(len(df[df.Liked == 1]) != 0):
                paragraph=' '.join(df[df.Liked==1].Review.tolist())
                posi = cloud(paragraph,"positif")
                freq = plot_frequence(paragraph)
            else:
                posi = ""
                freq = ""
            image6=plot_reviews_per_year_month(df)
            recapi = recap(df)
            
            today = datetime.now().date()
            six_months_ago = today - timedelta(days=6*30)
            dates_six_months_ago = pd.date_range(start=six_months_ago, end=today, freq='M').strftime('%Y-%m').tolist()
            df['Date'] = pd.to_datetime(df['Date']).apply(lambda x: x.strftime('%Y-%m'))
            df = df[df['Date'].isin(dates_six_months_ago)]
                
            if df.empty:
                return render_template('csv-reviews.html', image1=plot1, image2=freq1 , image3=freq, image4=posi,image5=néga,image6=image6,text1=recapi)
            else:
                
                if (len(df[df.Liked == 0]) != 0):
                    paragraph=' '.join(df[df.Liked==0].Review.tolist())
                    néga2 = cloud(paragraph,"negatif")
                    freq2 = plot_frequence(paragraph)
                else:
                    néga2 = ""
                    freq2 =""
                if(len(df[df.Liked == 1]) != 0):
                    paragraph=' '.join(df[df.Liked==1].Review.tolist())
                    posi2 = cloud(paragraph,"positif")
                    freq3 = plot_frequence(paragraph)
                else:
                    posi2 = ""
                    freq3 = ""
                
                recapi2 = recap_month(df)
                
                return render_template('process-csv.html', image1=plot1, image2=freq1 , image3=freq, image4=posi,image5=néga, image6=image6,image7=plot_sentiment_6month(df),image8=month_total(df),image9=freq2,image10=freq3,image11=néga2,image12=posi2,text1=recapi,text2=recapi2)

if __name__ == '__main__':
    app.run()
